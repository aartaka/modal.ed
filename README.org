#+TITLE:Implementing Modal with ed, in ed

This project is a proof of concept for compilation of Modal
(a string-rewriting system, as explained by [[https://wryl.tech/projects/modal.html][wryl]] and [[https://wiki.xxiivv.com/site/modal.html][Devine Lu Linvega]]) into ed scripts.
Using ed script as a compiler!
All based on regex substitution (using POSIX BREs) and churning out repetitive patterns.

* Getting started

Clone the repository:
#+begin_src sh
  git clone https://github.com/aartaka/modal.ed
#+end_src
and then use the bundled [[./build.sh]] to compile any given Modal file to ed script:
#+begin_src sh
  ./build.sh example/postcard.modal > postcard.ed
#+end_src
and run it with ed:
#+begin_src sh
  ed -s < postcard.ed
  # (modal (a virtual is god) is modal)
#+end_src

This ed script /should/ do the same thing as Modal file.
Theoretically.
Right now, the behavior is that of [[https://www.sheeeeeeeep.art/types-of-modal.html#lambda-modal][Lambda Modal]],
but that's left to be proved thoroughly.

You can also do a debug build by invoking the bundled [[./debug.sh]] after building the ed file:
#+begin_src sh
  ./build.sh example/postcard.modal > postcard.ed
  ./debug.sh postcard.ed
  ed -s < postcard.ed
  # is modal a (programming language)
  # or, is modal (a virtual machine)
  # print (modal (a virtual is machine) is (a meta-language))
  # print (modal (a virtual is machine) is modal)
  # print (modal (a virtual is god) is modal)
  # {{{(modal (a virtual is god) is modal)}}}
  # (modal (a virtual is god) is modal)}}}
  # (modal (a virtual is god) is modal)
  # (modal (a virtual is god) is modal)
#+end_src


* Programming for modal.ed
Postcard program (adapted from Devine's wiki) is cheating,
because it works almost right in modal.ed (compared against [[https://git.sr.ht/~rabbits/thuesday][modal.c]]):
#+begin_src sh
  ed -s < postcard.ed
  # => (modal (a virtual is god) is modal)
  ./bin/modal postcard.modal
  # => (modal is (a virtual god) is modal)
#+end_src

Other programs are more likely to crash and burn due to [[Limitations]].
There's a style of programming that is less likely to break in modal.ed:
- Use rule delimiters (like commas or keywords in postcard.modal) to separate registers.
  - Otherwise registers might match too much.
- Don't use too deeply nested rules.
  - More likely to either not compile at all.
  - Or cause some undefined behavior at runtime.
- Put rules in the supposed order of application. Given that modal.ed is not looping indefinitely, but rather repeating all the rules N times, it's better to optimize for that restricted number of applications.
  - Or just copy-paste the ~g/g\//p~ line enough times for modal.ed to process your program.
- Use regex register, ~?/regex/~ to shape/match the inputs and control the greedy nature of default rules. Here's how reverse rules might look like with ~?/.~ for one-char matching.
#+begin_src lisp
<> (reverse (?x)) (reverse is () for (?x))
<> (reverse is ?z for (?/. (?y))) (reverse is (?/. ?z) for (?y))
<> (reverse is ?x for ()) ?x
reverse (m (o (d (a (l ())))))
#+end_src
- Use Lisp-like leading-function forms for complex tuples (if you must):
#+begin_src lisp
  (fn1 (fn2 (fn3 (rest before a tiger tail))))
#+end_src

Given all these limitations, why would one really use modal.ed?
- Pragmatic answer :: They won't.
- Hacker's answer :: Because it's intriguing to see how far it can get.
- Pragmatic Modal Hacker's answer :: It's the only implementation supporting [[https://lists.sr.ht/~rabbits/horadric/%3C874j4xo5mi.fsf@aartaka.me%3E][rest rules]] and regex registers.

* Limitations/TODOs
- POSIX regex are weak enough to cause problems in parsing. I warned you!
- The depth and complexity of the rules is capped at:
  - 3+ (in the worst case) levels of parentheses nesting.
  - 5 registers per rule.
- It compiles to static ed substitution rules, thus it has no dynamicity and homoiconicity.
  - [X] There's rule undefinition, but it's static compile-time too.
  - [X] Toplevel lambdas are supported as one-time substitutions!
  - [ ] Homoiconicity can probably be achieved by re-evaluating a script on itself in some way, but I didn't try that yet.
- [ ] Incomplete special register support.
  - [X] There's ~?:~.
  - [X] There's a special literal regex register ~?/regex/~
  - [ ] ~?*~ should be possible with some hacking.
    - [ ] ~?^~ too, maybe?
  - [X] No ~?.~ supported, utilizing the greedy nature of regular register matching.
  - [X] No =?~=, and won't be—the whole nature of ed script takes up standard input as script instead of user input.
    - There might be some hacks, but I'm not aware of them.
  - [ ] No other registers yet, though.
- No Thuesday extensions like ALU and drawing. And it's unlikely to ever be implemented—I don't like the idea of expanding pure systems with "practical" features. But I'll be glad to accept a contribution if someone steps up!

* The Story
I joined Merveilles Town in August 2024, after my previous Fediverse home, kopimi.space, shut down.
I found a lot of cool folks on Merveilles, doing all sorts of crazy projects.
And I value that!

One project that everyone was hyped up about was Modal—a simple yet powerful programming system/paradigm.
As someone having a taste of rewriting systems... in ed... I was interested.
So I asked the most sensible question: why Modal and not ed/sed?

Even though I've got sensible replies then, I was uneasy—why use Modal if ed works well enough?
Thus this project—an attempt to fit Modal into ed rules.
This is a doomed enterprise (is it?), but at least it's fun!
